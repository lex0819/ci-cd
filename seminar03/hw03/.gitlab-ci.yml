image: busybox:latest

stages:
  - build
  - test
  - deploy
  - stop
  - stop previous jobs # найдёт все запущенные pipeline по названии ветки(ref) и остановит их

variables:
  IMAGE_TAG: $CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA

cache:
  key:
    files:
      - composer.lock
  paths:
    - vendor/

before_script:
  - echo "Before script section"
  - echo "For example you might run an update here or install a build dependency"
  - echo "Or perhaps you might print out some debugging details"

after_script:
  - echo "After script section"
  - echo "For example you might do some cleanup here"

build1:
  stage: build
  script:
    - echo "Do your build here"
    - echo one >> house.txt
    - mkdir -p vendor/
    - echo "build" > vendor/hello.txt
#    - sleep 60

docker build:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  script:
    - docker login -u $GITLAB_CI_USER -p $GITLAB_CI_PASSWORD $CI_REGISTRY
    - echo $GITLAB_CI_USER $GITLAB_CI_PASSWORD $CI_REGISTRY $CI_REGISTRY_IMAGE:$IMAGE_TAG
    - docker build -t $CI_REGISTRY_IMAGE:$IMAGE_TAG .
    - docker push $CI_REGISTRY_IMAGE:$IMAGE_TAG

test1:
  stage: test
  #  resource_group: phone
  script:
    - echo "Do a test here"
    - echo "For example run a test suite"
    - sleep 60
#    - grep one house.txt
#    - sleep 60
#    - cat vendor/hello.txt

#    - sleep 10

test2:
  image: docker:latest
  stage: test
  services:
    - docker:dind
  script:
    - echo "Do another parallel test here"
    - echo "For example run a lint test"
    - docker run $CI_REGISTRY_IMAGE:$IMAGE_TAG
    - docker ps
    - echo "----------TEST DOCKER IMAGE--------"
#    - grep two house.txt

deploy to stage:
  stage: deploy
  variables:
    TARGET_ENV: staging
  script:
    - echo "Do you deploy here to ${TARGET_ENV}"
    - echo ${DB_SERVER}
  only:
    - main
  environment:
    name: staging
    on_stop: stop to staging
    auto_stop_in: 1 day

deploy to preprod:
  stage: deploy
  variables:
    TARGET_ENV: preprod
  script:
    - echo "Do you deploy here to ${TARGET_ENV}"
    - echo ${MyLogin}
  only:
    - main
  environment:
    name: preprod
    auto_stop_in: 1 day

stop to staging:
  stage: stop
  variables:
    TARGET_ENV: staging
  script:
    - echo "STOP ${TARGET_ENV}"
  only:
    - main
  when: manual
  environment:
    name: staging
    action: stop

deploy to prod:
  stage: deploy
  variables:
    TARGET_ENV: prod
  script:
    - echo "Do you deploy here to ${TARGET_ENV}"
    - echo ${DB_SERVER}
  only:
    - main
  when: manual
  environment:
    name: prod

deploy to production:
  stage: deploy
  variables:
    TARGET_ENV: production
  script:
    - echo "Do you deploy here to ${TARGET_ENV}"
    - echo ${MyLogin}
  only:
    - main
  when: manual
  environment:
    name: production

cancel:
  stage: stop previous jobs
  image: everpeace/curl-jq
  script:
    - |
      if [ "$CI_COMMIT_REF_NAME" == "main" ]
        then
          (
            echo "Cancel old pipelines from the same branch except last"
            OLD_PIPELINES=$( curl -s -H "PRIVATE-TOKEN: $RUNNER_TOKEN" "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/pipelines?ref=${CI_COMMIT_REF_NAME}&status=running" \
                  | jq '.[] | .id' | tail -n +2 )
                  for pipeline in ${OLD_PIPELINES}; \
                      do echo "Killing ${pipeline}" && \
                        curl -s --request POST -H "PRIVATE-TOKEN: ${RUNNER_TOKEN}" "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/pipelines/${pipeline}/cancel"; done
          ) || echo "Canceling old pipelines (${OLD_PIPELINES}) failed"
      fi

#pages:
#  stage: deploy
#  script:
#    - mkdir -p public
#    - cp house.txt public/index.html
#    - echo 404 >> public/404.html
#  artifacts:
#    exclude:
#    - public/404.html
#    paths:
#      - public
#  only:
#    - main
